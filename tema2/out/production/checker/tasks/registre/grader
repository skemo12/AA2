#!/usr/bin/python3

import inspect
import pathlib
import os
import sys

current_dir = os.path.dirname(os.path.abspath(
    inspect.getfile(inspect.currentframe())))
root_dir = pathlib.Path(current_dir).parent.parent
sys.path.insert(0, str(root_dir))

from check_utils.grader import Grader

class RegistreGrader(Grader):

    def read_network(self, input):
        variables = [int(x) for x in input[0].split()]
        if len(variables) == 3:
            n, _, k = variables
        else:
            n, _ = variables
            k = None
        network = [[] for _ in range(n)]
        for i in range(1, n):
            node, neigh = [int(x) for x in input[i].split()]
            network[node - 1].append(neigh - 1)
            network[neigh - 1].append(node - 1)
        return network, k


    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
    
    def verify_solution(self, network, registers, max_registers):
        if len(set(registers)) > max_registers:
            return False

        for node, neights in enumerate(network):
            for neigh in neights:
                if registers[node] == registers[neigh]:
                    return False
        return True



    def grade_test(self):
        try:
            input, output, ref = self.read()
            network, max_registers = self.read_network(input)
        except:
            self.exit(code=-1, err=f"not valid input")

        num_nodes = len(network)

        try:
            ans = output[0].strip()
        except:
            self.exit(code=-1, err=f"No output")

        ref_ans = ref[0].strip()

        if ans != ref_ans:
            self.exit(code=-1, err=f"Wrong answer given by oracle. got:{ans}, expected:{ref_ans}")

        if ans == "True":
            registers = list(map(int, output[1].split()))
            if len(registers) != num_nodes:
                self.exit(code=-1, err=f"Wrong number of registers. got {len(registers)}, expected {num_nodes}")
        else:
            self.add_points(self.max_points)
            return

        if not self.verify_solution(network, registers, max_registers):
            self.exit(code=-1, err=f"Not a valid registry distribution.")

        self.add_points(self.max_points)



        
if __name__ == '__main__':
    assert len(sys.argv) == 5, sys.argv
    RegistreGrader(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]).run()
