#!/usr/bin/python3

import inspect
import pathlib
import os
import sys

current_dir = os.path.dirname(os.path.abspath(
    inspect.getfile(inspect.currentframe())))
root_dir = pathlib.Path(current_dir).parent.parent
sys.path.insert(0, str(root_dir))

from check_utils.grader import Grader

class ReteleGrader(Grader):

    def read_network(self, input):
        variables = [int(x) for x in input[0].split()]
        if len(variables) == 3:
            n, _, k = variables
        else:
            n, _ = variables
            k = None
        network = [[] for _ in range(n)]
        for i in range(1, n):
            node, neigh = [int(x) for x in input[i].split()]
            network[node - 1].append(neigh - 1)
            network[neigh - 1].append(node - 1)
        return network, k

    def verify_network(self, network, group):
        for elem1 in range(len(group)):
            for elem2 in range(elem1 + 1, len(group)):
                if group[elem1] not in network[group[elem2]]:
                    return False

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

    def grade_test(self):
        try:
            input, output, ref = self.read()
            network, size = self.read_network(input)
        except:
            self.exit(code=-1, err=f"not valid output")

        try:
            if (output[0].strip() != ref[0].strip()):
                self.exit(code=-1, err=f"Wrong answer given by oracle. got:{output[0].strip()}, expected:{ref[0].strip()}")
        except:
            self.exit(code=-1, err="No output")

        if (output[0].strip() == "True"):
            groups = [int(x) - 1 for x in output[1].split()]
            if (len(groups) != size):
                self.exit(code=-1, err=f"wrong number of persons. got:{len(groups)}, expected: {size}")
        else:
            self.add_points(self.max_points)
            return


        if output[0].strip == "True" and not self.verify_network(network, groups):
            self.exit(code=-1, err=f"Answer is not a valid group.")
        self.add_points(self.max_points)

        
if __name__ == '__main__':
    assert len(sys.argv) == 5, sys.argv
    ReteleGrader(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4]).run()
